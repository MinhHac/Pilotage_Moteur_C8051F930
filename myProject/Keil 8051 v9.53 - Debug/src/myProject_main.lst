C51 COMPILER V9.53.0.0   MYPROJECT_MAIN                                                    05/09/2019 23:35:50 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MYPROJECT_MAIN
OBJECT MODULE PLACED IN .\src\myProject_main.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Minh Ha
                    -c\SimplicityStudio\v3_workspace\myProject\src\myProject_main.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) 
                    -FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/Users/Minh Hac/SimplicityStudio/v
                    -3_workspace/myProject/inc;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/shared/si8051Base;C:/Silic
                    -onLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/C8051F930;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/
                    -si8051/v3//Device/C8051F930/inc) PRINT(.\src\myProject_main.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\myProje
                    -ct_main.OBJ)

line level    source

   1          
   2          //-----------------------------------------------------------------------------
   3          // Includes
   4          //-----------------------------------------------------------------------------
   5          #include <SI_C8051F930_Register_Enums.h>
   6          #include "InitDevice.h"
   7          #include "variables_globales.h"
   8          #include "moteur.h"
   9          #include "moteur_port.h"
  10          
  11          //-----------------------------------------------------------------------------
  12          // procotype
  13          //-----------------------------------------------------------------------------
  14          void scheduler(void);
  15          
  16          //-----------------------------------------------------------------------------
  17          // main() Routine
  18          // ----------------------------------------------------------------------------
  19          void main(){
  20   1      
  21   1              initDevice();                                    // initialisations du microcontrôleur
  22   1      
  23   1              while (1){
  24   2                      while(new_task==0);      // polling sur le flag de la base de temps
  25   2                                       // Attente activation du gestionnaire de tache
  26   2                      new_task=0;              // Lorsque finir l’interruption, remettre le flag = 0
  27   2                      scheduler();              // lancer la function scheduler()
  28   2              }
  29   1      
  30   1      }
  31          
  32          
  33          // chaque tache de scheduler prend une duree de temps de 60*150us = 9ms
  34          void scheduler(void){                                // gestionnaire des taches
  35   1      
  36   1              static bit flag_init_moteur =0, etat_button=0;   // les flags en static
  37   1      
  38   1              switch(scheduler_ct) {                  // ordonnanceur comporte 4 taches
  39   2                      case 0: {                           //tache 1 => faire quelque chose
  40   3                              if(flag_init_moteur == 0){          // vérifier l’état du flag si le moteur n’initialise pas =>initiali
             -se le
  41   4                                   flag_init_moteur = 1;   // Mettre le flag = 1 pour la prochaine fois, il ne le réinitialise pas
  42   4                                       InitMoteur();                // Appel fonction initMoteur() pour initialiser le moteur
  43   4                              }
  44   3                          if(BUTTON != 0){                                                     // si le bouton est appuyé
  45   4                                   etat_button = 1;                                              // le flag = 1
  46   4                          }
  47   3                          else if(BUTTON == 0 && etat_button != 0){       //  lorsque le bouton est lâché,
  48   4                              demarage_arret_Moteur();            //  appel cette fonction pour stopper ou démarrer le moteur
  49   4                               etat_button = 0;                             // remettre le flag = 0 après de lâcher
C51 COMPILER V9.53.0.0   MYPROJECT_MAIN                                                    05/09/2019 23:35:50 PAGE 2   

  50   4                          }
  51   3                              break;
  52   3                      }
  53   2                      case 60: {                          //tache 2=> faire quelque chose
  54   3                              break;
  55   3                      }
  56   2                      case 120: {                         //tache 3=> faire quelque chose
  57   3                              break;
  58   3                      }
  59   2                      case 180: {                         //tache 4=> faire quelque chose
  60   3                              break;
  61   3                      }
  62   2                      default: break;
  63   2              }
  64   1      
  65   1              scheduler_ct++;                              // basculement d’une tache vert une autre
  66   1              if(scheduler_ct==240) scheduler_ct=0;        // après la tache 4, la tâche sera traité tache 0
  67   1      }
  68          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     84    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
